"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dateHelper_1 = require("../../utils/dateHelper");
Page({
    data: {},
    onLoad: function (options) {
    },
    onReady: function () {
        const currDate = dateHelper_1.toFormatString(new Date());
        const newBook = {
            bookName: '',
            bookid: '',
            initDate: currDate,
            initAmount: 0,
            currency: 'CNY',
        };
        this.setData(Object.assign({}, newBook));
    },
    onDateChange: function (event) {
        const { detail: { value } } = event;
        this.setData({
            initDate: value,
        });
    },
    onNameChange: function (event) {
        const { detail: { value } } = event;
        this.setData({
            bookName: value,
        });
    },
    onAmountChange: function (event) {
        const { detail: { value } } = event;
        this.setData({
            initAmount: value,
        });
    },
    onAddBook: function () {
        const { bookName, initAmount, initDate, currency } = this.data;
        wx.cloud.callFunction({
            name: "addBook",
            data: {
                bookName,
                initAmount,
                initDate,
                currency,
            },
        }).then(res => {
            console.log('调用success', res);
            wx.navigateBack({
                delta: 0,
            });
        }).catch((err) => console.log(err));
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkQm9vay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFkZEJvb2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx1REFBdUQ7QUFNdkQsSUFBSSxDQUFDO0lBS0gsSUFBSSxFQUFFLEVBQ0w7SUFLRCxNQUFNLEVBQUUsVUFBVSxPQUFPO0lBRXpCLENBQUM7SUFLRCxPQUFPLEVBQUU7UUFDUCxNQUFNLFFBQVEsR0FBRywyQkFBYyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQTtRQUMzQyxNQUFNLE9BQU8sR0FBUztZQUNwQixRQUFRLEVBQUUsRUFBRTtZQUNaLE1BQU0sRUFBRSxFQUFFO1lBQ1YsUUFBUSxFQUFFLFFBQVE7WUFDbEIsVUFBVSxFQUFFLENBQUM7WUFDYixRQUFRLEVBQUUsS0FBSztTQUNoQixDQUFBO1FBQ0QsSUFBSSxDQUFDLE9BQU8sbUJBQ1AsT0FBTyxFQUNWLENBQUE7SUFDSixDQUFDO0lBU0QsWUFBWSxFQUFFLFVBQVUsS0FBVTtRQUNoQyxNQUFNLEVBQUUsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsR0FBRyxLQUFLLENBQUE7UUFDbkMsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUNYLFFBQVEsRUFBRSxLQUFLO1NBQ2hCLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFFRCxZQUFZLEVBQUUsVUFBVSxLQUFVO1FBQ2hDLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxHQUFHLEtBQUssQ0FBQTtRQUNuQyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ1gsUUFBUSxFQUFFLEtBQUs7U0FDaEIsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVELGNBQWMsRUFBRSxVQUFVLEtBQVU7UUFDbEMsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEdBQUcsS0FBSyxDQUFBO1FBQ25DLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDWCxVQUFVLEVBQUUsS0FBSztTQUNsQixDQUFDLENBQUE7SUFDSixDQUFDO0lBRUQsU0FBUyxFQUFFO1FBQ1QsTUFBTSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFnQixDQUFDO1FBQzNFLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDO1lBQ3BCLElBQUksRUFBRSxTQUFTO1lBQ2YsSUFBSSxFQUFFO2dCQUNKLFFBQVE7Z0JBQ1IsVUFBVTtnQkFDVixRQUFRO2dCQUNSLFFBQVE7YUFDVDtTQUNGLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDWixPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQTtZQUM3QixFQUFFLENBQUMsWUFBWSxDQUFDO2dCQUNkLEtBQUssRUFBRSxDQUFDO2FBQ1QsQ0FBQyxDQUFBO1FBQ0osQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFDckMsQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHRvRm9ybWF0U3RyaW5nIH0gZnJvbSAnLi4vLi4vdXRpbHMvZGF0ZUhlbHBlcidcclxuaW1wb3J0IHsgYm9vayB9IGZyb20gJy4uLy4uL2RhdGFNb2RlbC9kYXRhJ1xyXG5cclxuaW50ZXJmYWNlIHBhZ2VEYXRhIGV4dGVuZHMgYm9vayB7XHJcbn1cclxuXHJcblBhZ2Uoe1xyXG5cclxuICAvKipcclxuICAgKiDpobXpnaLnmoTliJ3lp4vmlbDmja5cclxuICAgKi9cclxuICBkYXRhOiB7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLliqDovb1cclxuICAgKi9cclxuICBvbkxvYWQ6IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcblxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5Yid5qyh5riy5p+T5a6M5oiQXHJcbiAgICovXHJcbiAgb25SZWFkeTogZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc3QgY3VyckRhdGUgPSB0b0Zvcm1hdFN0cmluZyhuZXcgRGF0ZSgpKVxyXG4gICAgY29uc3QgbmV3Qm9vazogYm9vayA9IHtcclxuICAgICAgYm9va05hbWU6ICcnLFxyXG4gICAgICBib29raWQ6ICcnLFxyXG4gICAgICBpbml0RGF0ZTogY3VyckRhdGUsXHJcbiAgICAgIGluaXRBbW91bnQ6IDAsXHJcbiAgICAgIGN1cnJlbmN5OiAnQ05ZJyxcclxuICAgIH1cclxuICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgIC4uLm5ld0Jvb2tcclxuICAgIH0pXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICog55So5oi354K55Ye75Y+z5LiK6KeS5YiG5LqrXHJcbiAgICovXHJcbiAgLy8gb25TaGFyZUFwcE1lc3NhZ2U6IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgLy8gfSxcclxuXHJcbiAgb25EYXRlQ2hhbmdlOiBmdW5jdGlvbiAoZXZlbnQ6IGFueSkge1xyXG4gICAgY29uc3QgeyBkZXRhaWw6IHsgdmFsdWUgfSB9ID0gZXZlbnRcclxuICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgIGluaXREYXRlOiB2YWx1ZSxcclxuICAgIH0pXHJcbiAgfSxcclxuXHJcbiAgb25OYW1lQ2hhbmdlOiBmdW5jdGlvbiAoZXZlbnQ6IGFueSkge1xyXG4gICAgY29uc3QgeyBkZXRhaWw6IHsgdmFsdWUgfSB9ID0gZXZlbnRcclxuICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgIGJvb2tOYW1lOiB2YWx1ZSxcclxuICAgIH0pXHJcbiAgfSxcclxuXHJcbiAgb25BbW91bnRDaGFuZ2U6IGZ1bmN0aW9uIChldmVudDogYW55KSB7XHJcbiAgICBjb25zdCB7IGRldGFpbDogeyB2YWx1ZSB9IH0gPSBldmVudFxyXG4gICAgdGhpcy5zZXREYXRhKHtcclxuICAgICAgaW5pdEFtb3VudDogdmFsdWUsXHJcbiAgICB9KVxyXG4gIH0sXHJcblxyXG4gIG9uQWRkQm9vazogZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc3QgeyBib29rTmFtZSwgaW5pdEFtb3VudCwgaW5pdERhdGUsIGN1cnJlbmN5IH0gPSB0aGlzLmRhdGEgYXMgcGFnZURhdGE7XHJcbiAgICB3eC5jbG91ZC5jYWxsRnVuY3Rpb24oe1xyXG4gICAgICBuYW1lOiBcImFkZEJvb2tcIixcclxuICAgICAgZGF0YToge1xyXG4gICAgICAgIGJvb2tOYW1lLFxyXG4gICAgICAgIGluaXRBbW91bnQsXHJcbiAgICAgICAgaW5pdERhdGUsXHJcbiAgICAgICAgY3VycmVuY3ksXHJcbiAgICAgIH0sXHJcbiAgICB9KS50aGVuKHJlcyA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCfosIPnlKhzdWNjZXNzJywgcmVzKVxyXG4gICAgICB3eC5uYXZpZ2F0ZUJhY2soe1xyXG4gICAgICAgIGRlbHRhOiAwLFxyXG4gICAgICB9KVxyXG4gICAgfSkuY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coZXJyKSlcclxuICB9XHJcbn0pIl19